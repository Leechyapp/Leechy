apply plugin: 'com.android.application'

def keystoreDebugPropertiesFile = rootProject.file("keystore-debug.properties")
def keystoreDebugProperties = new Properties()
keystoreDebugProperties.load(new FileInputStream(keystoreDebugPropertiesFile))

def keystoreReleasePropertiesFile = rootProject.file("keystore-release.properties")
def keystoreReleaseProperties = new Properties()
keystoreReleaseProperties.load(new FileInputStream(keystoreReleasePropertiesFile))

android {
    namespace "com.leechy.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.leechy.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        debug {
            if(keystoreDebugPropertiesFile) {
                keyAlias keystoreDebugProperties['keyAlias']
                keyPassword keystoreDebugProperties['keyPassword']
                storeFile rootProject.file(keystoreDebugProperties['storeFile'])
                storePassword keystoreDebugProperties['storePassword']
            }
        }
        release {
            if(keystoreReleasePropertiesFile) {
                keyAlias keystoreReleaseProperties['keyAlias']
                keyPassword keystoreReleaseProperties['keyPassword']
                storeFile rootProject.file(keystoreReleaseProperties['storeFile'])
                storePassword keystoreReleaseProperties['storePassword']
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    // def servicesJSON = file('google-services.json')
    // if (servicesJSON.text) {
    //     apply plugin: 'com.google.gms.google-services'
    // }
    def buildType = gradle.startParameter.taskNames.any{it.toLowerCase().contains("debug")}?"debug":"release"
    if(buildType == "debug") {
        def servicesJSON = file('google-services-debug.json')
        if (servicesJSON.text) {
            apply plugin: 'com.google.gms.google-services'
        }
    } else if(buildType == "release") {
        def servicesJSON = file('google-services-release.json')
        if (servicesJSON.text) {
            apply plugin: 'com.google.gms.google-services'
        }
    }
} catch(Exception e) {
    def buildType = gradle.startParameter.taskNames.any{it.toLowerCase().contains("debug")}?"debug":"release"
    logger.info(buildType + "google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
